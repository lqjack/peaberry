#summary using the GuiceExtensionFactory with Eclipse plug-ins
#labels Phase-Design,Featured

_This work was influenced by Martin Lippert's [http://martinlippert.blogspot.com/2008/05/dependency-injection-for-extensions.html SpringExtensionFactory]._

===What is the !GuiceExtensionFactory?===

The [http://code.google.com/p/peaberry/source/browse/trunk/extensions/eclipse/src/org/ops4j/peaberry/eclipse/GuiceExtensionFactory.java GuiceExtensionFactory] is an `IExecutableExtensionFactory` that collects `Module` bindings registered under a particular extension point. This extension point is named in the `inject` attribute of the extension being created by this factory. The factory creates an `Injector` based on the discovered `Module` bindings and uses it to build the injected extension instance. Injectors will be re-used for extensions with the same `inject` attribute, unless the cache is forcibly `reset()` by the application.

To use this factory:

  # rename your class attribute, for example from `class=` to `key=`
  # add `class=org.ops4j.peaberry.eclipse.GuiceExtensionFactory:key`
  # add an `inject` attribute identifying the module extension point

... and sit back!

Here's a more detailed example, based on the standard RCP Mail Template:
{{{
<extension point="org.eclipse.ui.views">
  <view name="Message"
        allowMultiple="true"
        icon="icons/sample2.gif"
        class="example.ViewImpl"
        id="example.view" />
</extension>
}}}
becomes:
{{{
<extension point="org.eclipse.ui.views">
  <view name="Message"
        allowMultiple="true"
        icon="icons/sample2.gif"
        inject="example.modules"
        class="org.ops4j.peaberry.eclipse.GuiceExtensionFactory:key"
        key="example.ViewImpl"
        id="example.view" />
</extension>

<!-- then somewhere else -->

<extension point="example.modules">
  <module class="example.ViewModule" />
</extension>
}}}
If no name is given after the factory class it is assumed to be "id":
{{{
<extension point="org.eclipse.ui.views">
  <view name="Message"
        allowMultiple="true"
        icon="icons/sample2.gif"
        inject="example.modules"
        class="org.ops4j.peaberry.eclipse.GuiceExtensionFactory"
        id="example.ViewImpl" />
</extension>
}}}

*NOTE:* the !GuiceExtensionFactory class only uses Guice and Eclipse registry classes. It does not depend on other _peaberry_ classes and could therefore be used on its own if you wanted basic Guice injection without dynamic services.

===How do I use peaberry with the GuiceExtensionFactory?===

The [http://peaberry.googlecode.com/files/peaberry-eclipse-1.0-beta2.zip peaberry-eclipse] jar contains an executable extension called [http://code.google.com/p/peaberry/source/browse/trunk/extensions/eclipse/src/org/ops4j/peaberry/eclipse/PeaberryExtension.java PeaberryExtension]. This extension installs Guice bindings for the contributing plug-in's `BundleContext` as well as a `ServiceRegistry` that monitors OSGi services and Eclipse extensions. To use it you just need to add it to the list of `Module` extensions under the relevant extension point:
{{{
<extension point="examples.menu.modules">
  <module class="org.ops4j.peaberry.eclipse.PeaberryExtension" />
</extension>
}}}
In this case `BundleContext` would be the context of the plug-in contributing this XML fragment.