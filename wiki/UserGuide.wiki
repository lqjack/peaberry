#summary Guide for using the peaberry bundle with OSGi.
#labels Featured,Phase-Deploy

=Eclipse/PDE Example - Text Scrambling Service=

 # download and unzip the [http://peaberry.googlecode.com/files/PeaberryExample.zip example]
 # import the contents into Eclipse as existing projects
 # open *peaberry.platform* and set it as the target platform:
   [http://lh3.ggpht.com/mcculls/SI9u873Yg9I/AAAAAAAAA_o/CEl3JijDgtc/s800/1_load_target_platform.png http://lh3.ggpht.com/mcculls/SI9u873Yg9I/AAAAAAAAA_o/CEl3JijDgtc/s400/1_load_target_platform.png]
 # right-click on *peaberry.launch* and select Run As... -> peaberry:
   [http://lh4.ggpht.com/mcculls/SI9u881dwpI/AAAAAAAAA_w/YYGeevhRI88/s800/2_run_test_launcher.png http://lh4.ggpht.com/mcculls/SI9u881dwpI/AAAAAAAAA_w/YYGeevhRI88/s400/2_run_test_launcher.png]
 # you should see both bundles start and produce scrambled output:
   [http://lh4.ggpht.com/mcculls/SI9u9KSo7PI/AAAAAAAAA_4/HpR7L8FYtYg/s800/3_see_test_run.png http://lh4.ggpht.com/mcculls/SI9u9KSo7PI/AAAAAAAAA_4/HpR7L8FYtYg/s400/3_see_test_run.png]
 # try stopping and starting the service bundle using the console

===Useful Console Commands===

{{{
ss       -  list all bundles
stop n   -  stop bundle #n
start n  -  start bundle #n
diag n   -  diagnose bundle
}}}

=Fluent API Examples=

Injecting a dictionary service:

{{{
 @Inject
 DictionaryService dictionaryService;
 ...
 bind(DictionaryService.class).to(service(DictionaryService.class).single());
}}}

Injecting many dictionary services:

{{{
 @Inject
 Iterable<DictionaryService> dictionaryServices;
 ...
 bind(iterable(DictionaryService.class)).to(service(DictionaryService.class).multiple());
}}}

Exporting an implementation as a dictionary service:

{{{
 @Inject
 // the service can be controlled by the Export handle
 Export<DictionaryService> exportedDictionaryService;
 ...
 // the service is actually exported at injection time
 bind(export(DictionaryService.class)).to(registration(dictionaryImplKey).export());
}}}

Applying an LDAP filter to find a specific service:

{{{
 service(DictionaryService.class).filter("Language=French").single();
}}}

Applying custom attributes to an exported service:

{{{
 registration(dictionaryKey).attributes(names("Language=French")).export();
}}}

NOTE: helper methods for dealing with filters and attributes are in the {{{org.ops4j.peaberry.util}}} package.

You can also decorate an imported service with additional behaviour:

{{{
 service(DictionaryService.class).decoratedWith(decoratorImplKey).single();
}}}

or ask for the service to be injected directly, instead of a dynamic proxy:

{{{
 service(DictionaryService.class).direct().single();
}}}